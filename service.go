// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"
	"errors"

	"github.com/99designs/gqlgen/plugin/federation"
)

func (ec *executionContext) __resolve__service(ctx context.Context) (federation.Service, error) {
	if ec.DisableIntrospection {
		return federation.Service{}, errors.New("federated introspection disabled")
	}
	return federation.Service{
		SDL: `type Mutation @extends {
	create(input: ProblemReportCreateResource!): ProblemReport!
}
type ProblemReport @key(fields: "id") {
	id: ID!
	pos: WGS84Position!
	type: String!
}
input ProblemReportCreateResource {
	pos: ReportPosition!
	type: String!
}
type Query @extends {
	getAll: [ProblemReport]!
}
input ReportPosition {
	lat: Float!
	lon: Float!
}
type WGS84Position {
	lon: Float!
	lat: Float!
}
`,
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) ([]_Entity, error) {
	list := []_Entity{}
	for _, rep := range representations {
		typeName, ok := rep["__typename"].(string)
		if !ok {
			return nil, errors.New("__typename must be an existing string")
		}
		switch typeName {

		case "ProblemReport":
			id, ok := rep["id"].(string)
			if !ok {
				return nil, errors.New("opsies")
			}
			resp, err := ec.resolvers.Entity().FindProblemReportByID(ctx, id)
			if err != nil {
				return nil, err
			}

			list = append(list, resp)

		default:
			return nil, errors.New("unknown type: " + typeName)
		}
	}
	return list, nil
}
