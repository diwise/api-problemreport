// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"
	"errors"

	"github.com/99designs/gqlgen/plugin/federation"
)

func (ec *executionContext) __resolve__service(ctx context.Context) (federation.Service, error) {
	if ec.DisableIntrospection {
		return federation.Service{}, errors.New("federated introspection disabled")
	}
	return federation.Service{
		SDL: `scalar DateTime
type Device @key(fields: "id") {
	id: ID!
}
type Origin {
	device: Device
	pos: WGS84Position
}
type Problemreport implements Telemetry {
	from: Origin!
	when: DateTime!
	depth: Float!
	manual: Boolean
}
type Query @extends {
	snowdepths: [Problemreport]!
}
interface Telemetry {
	from: Origin!
	when: DateTime!
}
type WGS84Position {
	lon: Float!
	lat: Float!
}
`,
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) ([]_Entity, error) {
	list := []_Entity{}
	for _, rep := range representations {
		typeName, ok := rep["__typename"].(string)
		if !ok {
			return nil, errors.New("__typename must be an existing string")
		}
		switch typeName {

		case "Device":
			id, ok := rep["id"].(string)
			if !ok {
				return nil, errors.New("opsies")
			}
			resp, err := ec.resolvers.Entity().FindDeviceByID(ctx, id)
			if err != nil {
				return nil, err
			}

			list = append(list, resp)

		default:
			return nil, errors.New("unknown type: " + typeName)
		}
	}
	return list, nil
}
